{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nimport * as i2 from \"@awesome-cordova-plugins/splash-screen/ngx\";\nimport * as i3 from \"@awesome-cordova-plugins/status-bar/ngx\";\nimport * as i4 from \"@awesome-cordova-plugins/in-app-browser/ngx\";\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor(platform, splashScreen, statusBar, iab) {\n      this.platform = platform;\n      this.splashScreen = splashScreen;\n      this.statusBar = statusBar;\n      this.iab = iab;\n      this.initializeApp();\n    }\n    initializeApp() {\n      this.platform.ready().then(() => {\n        this.statusBar.backgroundColorByHexString(\"#032554\");\n        this.openDocenteResponsivo();\n        this.splashScreen.hide();\n      });\n    }\n    openDocenteResponsivo() {\n      const browser = this.iab.create(environment.url_dol, '_blank', {\n        location: 'no',\n        clearcache: 'yes',\n        clearsessioncache: 'yes',\n        hidenavigationbuttons: 'yes',\n        hideurlbar: 'yes',\n        fullscreen: 'yes',\n        toolbar: 'no',\n        disallowoverscroll: 'yes'\n      });\n      browser.on('loadstop').subscribe(event => {\n        browser.executeScript({\n          code: `(function() { \n        let originalXMLHttpRequest = XMLHttpRequest;\n\n        XMLHttpRequest = function() {\n            let xhr = new originalXMLHttpRequest();\n\n            // Store the original send method\n            let originalSend = xhr.send;\n\n            // Override the send method\n            xhr.send = function() {\n                let originalOnReadyStateChange = xhr.onreadystatechange;\n                xhr.onreadystatechange = function(event) {\n                \n                    if (xhr.readyState === 4 && xhr.status === 200) {\n                        \n                        // if (xhr._method && xhr._method.toLowerCase() === 'post') {\n                         \n                            try {\n                                let responseData = JSON.parse(xhr.responseText);\n\n                                // Here you can add checks for specific values\n                                if (responseData.commands && responseData.commands[0] \n                                    && responseData.commands[0].function === 'cronapi.util.downloadFile') {\n                                      url = '${environment.url_dol}'  + responseData.commands[0].params[0];                                    \n                                    if(url.indexOf('download') > -1){\n                                     var url_download = '?url-download=' + responseData.commands[0].params[0];\n                                    window.history.pushState(\"object or string\", \"Title\", url_download);\n                                    }\n                                }\n\n                            } catch (error) {\n                                console.error('Error processing JSON:', error);\n                            }\n                        // }\n\n                        // Ensure other listeners are called\n                        if (originalOnReadyStateChange) {\n                            originalOnReadyStateChange.apply(this, arguments);\n                        }\n                    }\n                };\n\n                // Store the method for later use in onreadystatechange\n                if (arguments[0]) {\n                    xhr._method = arguments[0];\n                }\n\n                // Call the original send method\n                originalSend.apply(this, arguments);\n            };\n\n            return xhr;\n        };\n        })()`\n        });\n        if (event.url.indexOf('url-download') > -1) {\n          console.log('Url download = ' + event.url);\n          var urlPart = event.url.split('url-download=');\n          console.log('url saida = ' + environment.url_dol + urlPart[1]);\n          window.open(environment.url_dol + urlPart[1]);\n        }\n      });\n    }\n  }\n  AppComponent.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.Platform), i0.ɵɵdirectiveInject(i2.SplashScreen), i0.ɵɵdirectiveInject(i3.StatusBar), i0.ɵɵdirectiveInject(i4.InAppBrowser));\n  };\n  AppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    decls: 2,\n    vars: 0,\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-app\");\n        i0.ɵɵelement(1, \"ion-router-outlet\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    dependencies: [i1.IonApp, i1.IonRouterOutlet]\n  });\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}